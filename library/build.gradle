apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

group = 'com.ToxicBakery.libs.jlibewf'
version = "1.0.${getBuildNumber()}" + (isRelease() ? "" : "-SNAPSHOT")

println "Version: $version"
println "Is Travis: ${isTravis()}"
println "Is Release: ${isRelease()}"
println "Is Tag: ${isTag()}"
println "Build Number: ${getBuildNumber()}"

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'

    compile 'log4j:log4j:1.2.16'
}

afterEvaluate { project ->
    uploadArchives {

        repositories {
            mavenDeployer {
                status = isRelease() ? "release" : "snapshot"
                configuration = configurations.archives

                if (isTravis()) {
                    beforeDeployment {
                        MavenDeployment deployment -> signing.signPom(deployment)
                    }
                }

                pom.artifactId = POM_ARTIFACT_ID

                if (isTravis()) {
                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                        authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                    }

                    snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                        authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                    }
                } else {
                    repository(url: mavenLocal().url)
                }

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                            email POM_DEVELOPER_EMAIL
                            organization POM_DEVELOPER_ORGANIZATION
                            organizationUrl POM_DEVELOPER_ORGANIZATION_URL
                        }
                    }
                }
            }
        }
    }


    if (isTravis()) {
        signing {
            sign configurations.archives
        }
    }

    // custom tasks for creating source/javadoc jars
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    // add javadoc/source jar tasks as artifacts
    artifacts {
        archives sourcesJar
        archives javadocJar
    }

}

def isTravis() {
    return System.env['TRAVIS_JOB_ID'] ? true : false
}

def isRelease() {
    return isTravis() && isTag() && Integer.parseInt(getBuildNumber()) > 0
}

String getBuildNumber() {
    return System.env['TRAVIS_BUILD_NUMBER'] ?: "0"
}

def isTag() {
    return System.env['TRAVIS_TAG'] ? true : false
}

def getRepositoryUsername() {
    return System.env['sonatype_user'] ?: hasProperty('sonatype_user') ? sonatype_user : ""
}

def getRepositoryPassword() {
    return System.env['sonatype_pass'] ?: hasProperty('sonatype_pass') ? sonatype_pass : ""
}
